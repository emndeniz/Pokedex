//
//  DetailsInteractor.swift
//  CataPoke
//
//  Created by Emin on 4.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation


typealias DetailsInteractorCompletion = ((Result<CompleteDetailResponse, APIError>) -> Void)
final class DetailsInteractor {
    
    private var requestHandler: RequestHandling
    
    init(requestHandler: RequestHandling) {
        self.requestHandler = requestHandler
    }
}

// MARK: - Extensions -

extension DetailsInteractor: DetailsInteractorInterface {

    
    func getDetails(url:URL, completion: @escaping DetailsInteractorCompletion){
        requestHandler.request(route: .getSpecies(url)) { [weak self] (result:Result<SpeciesDetails, APIError>) in
            guard let self = self else {return}
            
            switch result {
                
            case .success(let response):
                self.fetchEvolutionDetails(url: response.evolutionChain.url, specyDetail: response, completion: completion)
                
            case .failure(let err):
                //TODO: add error popups
                completion(.failure(err))
            }
        }
    }
    
    /// Fetches evolution details
    /// - Parameters:
    ///   - url: url to fetch evolution
    ///   - specyDetail: specy detail response model
    ///   - completion: completion
    private func fetchEvolutionDetails(url:URL,specyDetail: SpeciesDetails,completion: @escaping DetailsInteractorCompletion ){
        requestHandler.request(route: .getEvolutionChain(url)) { [weak self] (result:Result<EvolutionChainDetails, APIError>) in
            guard let self = self else {return}
            switch result {
                
            case .success(let evlotutionResponse):
             
                
                let mergedResponse = self.mergeResponses(specyDetails: specyDetail, evolutionDetails: evlotutionResponse)
                completion(.success(mergedResponse))
            case .failure(let err):
                completion(.failure(err))
            }
        }
    }
    
    /// Merges given two responses and create simple response model for presenter
    /// - Parameters:
    ///   - specyDetails: specy details response model
    ///   - evolutionDetails: evolution details response model
    /// - Returns: CompleteDetailResponse that contains merged response
    private func mergeResponses(specyDetails: SpeciesDetails, evolutionDetails: EvolutionChainDetails) -> CompleteDetailResponse{
        
        var evolutionChain: [Species] = []
        
        self.flattenEvolutionChain(evolutionChain: &evolutionChain, chainLink: evolutionDetails.chain)
        
        return CompleteDetailResponse(name: specyDetails.name,
                                      imageURL: StringUtilities.getBigPokemonImage(id: specyDetails.id),
                                      color: specyDetails.color.name,
                                      habitat: specyDetails.habitat.name,
                                      evolutionChain: evolutionChain)
    }
    
    /// Flattens given chain link
    /// - Parameters:
    ///   - evolutionChain: Evolotioun chain array
    ///   - chainLink: Given chain link
    private func flattenEvolutionChain(evolutionChain: inout [Species], chainLink: ChainLink){
        evolutionChain.append(chainLink.species)
        if !chainLink.evolvesTo.isEmpty{
            flattenEvolutionChain(evolutionChain: &evolutionChain,
                                  chainLink: chainLink.evolvesTo[0])
        }
    }
}


struct CompleteDetailResponse {
    let name: String
    let imageURL: URL?
    let color: String
    let habitat: String
    let evolutionChain : [Species]
}
