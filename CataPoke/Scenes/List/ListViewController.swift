//
//  ListViewController.swift
//  CataPoke
//
//  Created by Emin on 3.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class ListViewController: UIViewController {
    
    // MARK: - Public properties -
    
    var presenter: ListPresenterInterface!
    
    // MARK: - Private properties -
    
    private var collectionView: UICollectionView!

    private lazy var indicator:PokeIndicator = {
        let indicator = PokeIndicator(frame: CGRect(x: 0, y: 0, width: 120, height: 120))
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.startAnimating()
        return indicator
    }()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .defaultBackgroundColor
        title = "POKéDEX"
    
        createCollectionView()
        setupViews()
        presenter.getNewPokemons()
        
    }
    
    /// Creates the collection view.
    /// This function has to be called before setupViews. Because of the 'self' usage it can not be lazy loaded.
    private func createCollectionView() {
        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()
        
        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)
        
        // Purpose of this calculation to have two equal columns on the screen.
        let calculatedWidth = (self.view.frame.size.width - 30)/2
        layout.itemSize = CGSize(width: calculatedWidth, height: 160)
        layout.scrollDirection = .vertical
        
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.register(ListCell.self, forCellWithReuseIdentifier: ListCell.reuseIdentifier)
        collectionView.backgroundColor = .defaultBackgroundColor
        
        collectionView.dataSource = self
        collectionView.delegate = self
    }
    
    private func setupViews() {
        view.addSubview(collectionView)
        view.addSubview(indicator)
        

        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            
            indicator.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            indicator.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
    }
}

// MARK: - Extensions -

extension ListViewController: ListViewInterface {
    func dismissAlert() {
        self.navigationController?.dismiss(animated: true)
    }
    
    
    func refreshList() {
        collectionView.reloadData()
    }
    
    func dismissIndicator() {
        indicator.stopAnimating()
    }
}

extension ListViewController : UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter.numberOfCells
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ListCell.reuseIdentifier, for: indexPath) as! ListCell
        
        let data = presenter.cellForRowIndex(index: indexPath.row)
        cell.configureCel(specy: data)
        return cell
    }
    
    
}


extension ListViewController : UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter.didSelectRow(index: indexPath.row)
    }
}


