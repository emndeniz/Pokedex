//
//  ListPresenter.swift
//  CataPoke
//
//  Created by Emin on 3.11.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class ListPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: ListViewInterface
    private let interactor: ListInteractorInterface
    private let wireframe: ListWireframeInterface
    
    // Pagination number
    private (set) var pageNum = 0
    // Boolean that indicates is new page available or not.
    // In case next is nil we won't request new data.
    private var isNewPageExist = true
    private var isFetchingnewData = false
    // After this count presenter will fetch new page
    private let lastIndexToFetchNewData = 4
    
    var species: [Species] = [] {
        didSet {
            view.refreshList()
        }
    }
    // MARK: - Lifecycle -
    
    init(
        view: ListViewInterface,
        interactor: ListInteractorInterface,
        wireframe: ListWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension ListPresenter: ListPresenterInterface {

    
    var numberOfCells: Int {
        return species.count
    }
    
    func cellForRowIndex(index: Int) -> Species {
        // Check that we should request more data
        if isNewPageExist && ((species.count - index) <= lastIndexToFetchNewData) {
            getNewPokemons()
        }
        
        return species[index]
    }
    
    
    func getNewPokemons() {
        
        guard !isFetchingnewData else {
            // This will prevent fetching next page before the previous one received
            return
        }
        
        isFetchingnewData = true
        interactor.getSpeciesList(pageNum: pageNum) { [weak self ] (result:Result<SpeciesResponse, APIError>)  in
            guard let self = self else { return }
            switch result {
                
            case .success(let response):
                self.species.append(contentsOf: response.results)
                
                self.isNewPageExist = response.next != nil
                self.pageNum += 1
            case .failure(let err):
                self.showAlertToUser(error: err)

            }
            self.view.dismissIndicator()
            self.isFetchingnewData = false
        }
    }
    
    func didSelectRow(index: Int) {
        wireframe.navigateToDetails(specyURL: species[index].url)
    }
    
    private func showAlertToUser(error:APIError) {
        // List scene has pagination, we won't show connection problem message to user beacuse of not to annoy him/her.
        if error != APIError.connectionProblem {
            
            let retryAction = Action(with: "retryText".localized, style: .normal) {[weak self] in
                // This is the landing page. User should retry until it get success result.
                // Otherwise user can not use app at all.
                self?.view.dismissAlert()
                self?.getNewPokemons()
            }
            
            self.wireframe.showAlert(with: "errorOoops".localized, message: "failedToFetchDataMessage".localized, actions: [retryAction])
  
        }
    }
    
}
